options {
  STATIC = false;
  MULTI = true;
  NODE_DEFAULT_VOID=true;
  NODE_PREFIX = "AST";
}

PARSER_BEGIN(LStatement)
package ru.nsu.logic.lang.ast;

import java.util.*;
import ru.nsu.logic.lang.common.*;
public class LStatement {}
PARSER_END(LStatement)

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
  < CLASS: "class">
  |
  < FUNCTION: "function">
  |
  < INHERIT: "extends">
  |
  < END: ";">
  |
  < OBR: "{" >
  |
  < CBR: "}" >
  |
  < OPAR  : "(" >
  |
  < CPAR  : ")" >
  |
  < OAR: "[">
  |
  < CAR: "]">
  |
  < COMMA: "," >
  |
  < DOT: "." >
  |
  < ARROW: "==>" >
  |
  < COND: "cond" >
  |
  < ASSIGN: ":=" >
  |
  < THIS: "this" >
  |
  < NULL: "nil" >
  |
  < RETURN: "return" >
  |
  < ACCESS_PUBLIC: "public" >
  |
  < ACCESS_PRIVATE: "private" >
  |
  < ACCESS_PROTECTED: "protected" >
  |
  < LOGIC_AND: "and" >
  |
  < LOGIC_OR: "or" >
  |
  < LOGIC_NOT: "not" >
  |
  < FORALL: "forall" >
  |
  < EXISTS: "exists" >
  |
  < IN: "in" >
  |
  < SUBSETEQ: "subseteq" >
  |
  < IDENTIFIER: ["a"-"z","A"-"Z", "_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
  |
  < BINARY_OP: ["+", "-", "*", "/"] >
  |
  < EQ: "=" >
  |
  < NE: "<>" >
  |
  < LT: "<" >
  |
  < GT: ">" >
  |
  < LE: "<=" >
  |
  < GE: ">=" >
  |
  < INT_VAL: ( ["0"-"9"] )+ >
  |
  < FLT_VAL: ( ["0"-"9"] )+ "." ( ["0"-"9"] )+  >
  |
  < STR_VAL: "\"" (~["\""])* "\"" >
}

ASTLLangProgram LLangProgram() #LLangProgram :
{}
{
  (AllDeclarations() | AllStatements())* <EOF>
  {return jjtThis;}
}

////////////////////////////////////////////////////////
//                       Common                       //
////////////////////////////////////////////////////////

void AccessType() # AccessType :
{Token t;}
{
  (t=<ACCESS_PUBLIC> | t=<ACCESS_PRIVATE> | t=<ACCESS_PROTECTED>)
  {
    jjtThis.jjtSetValue(AccessType.valueOf(t.image.toUpperCase()));
  }
}

Token Identifier() :
{Token t;}
{
  t=<IDENTIFIER> {return t;}
}


////////////////////////////////////////////////////////
//                    Declarations                    //
////////////////////////////////////////////////////////

void AllDeclarations():
{}
{
  FunctionDeclaration() | ClassDeclaration()
}

void ArgumentDeclaration() # ArgumentDeclaration :
{Token arg;}
{
  arg=Identifier()
  {
    jjtThis.jjtSetValue(arg.image);
    jjtThis.jjtSetLocation(new FileLocation(arg.beginLine, arg.beginColumn));
  }
}

void BodyDeclaration() # BodyDeclaration :
{}
{
  (AllStatements())*
}

// 1. Function Declaration

void FunctionDeclaration() #FunctionDeclaration :
{Token functionName;}
{
  <FUNCTION> functionName=Identifier()
  <OPAR> (ArgumentDeclaration() (<COMMA> ArgumentDeclaration())*)? <CPAR>
  <OBR> BodyDeclaration() <CBR>
  {
    jjtThis.jjtSetValue(functionName.image);
    jjtThis.jjtSetLocation(new FileLocation(functionName.beginLine, functionName.beginColumn));
  }
}

// 2. Class Declaration

void InheritanceDeclaration() # InheritanceDeclaration() :
{Token className;}
{
  <INHERIT> className=Identifier()
  {
    jjtThis.jjtSetValue(className.image);
    jjtThis.jjtSetLocation(new FileLocation(className.beginLine, className.beginColumn));
  }
}

void ClassDeclaration() #ClassDeclaration :
{Token className; Token baseClass = null;}
{
  <CLASS> className=Identifier() [InheritanceDeclaration()]
  <OBR> (LOOKAHEAD(2) ClassMemberDeclaration() | ClassMethodDeclaration())*
  <CBR>
  {
    jjtThis.jjtSetValue(className.image);
    jjtThis.jjtSetLocation(new FileLocation(className.beginLine, className.beginColumn));
  }
}

void ClassMemberDeclaration() #ClassMemberDeclaration :
{Token member;}
{
  AccessType() member=Identifier() <END>
  {
    jjtThis.jjtSetValue(member.image);
    jjtThis.jjtSetLocation(new FileLocation(member.beginLine, member.beginColumn));
  }
}

void ClassMethodDeclaration() #ClassMethodDeclaration :
{Token methodName;}
{
  [AccessType()] <FUNCTION> methodName=Identifier()
  <OPAR> (ArgumentDeclaration() (<COMMA> ArgumentDeclaration())*)? <CPAR>
  <OBR> BodyDeclaration() <CBR>
  {
    jjtThis.jjtSetValue(methodName.image);
    jjtThis.jjtSetLocation(new FileLocation(methodName.beginLine, methodName.beginColumn));
  }
}


////////////////////////////////////////////////////////
//                       Formulas                     //
////////////////////////////////////////////////////////

ComparisonOperator CmpOp() :
{}
{
  <EQ> {return ComparisonOperator.EQ;} |
  <NE> {return ComparisonOperator.NE;} |
  <LT> {return ComparisonOperator.LT;} |
  <LE> {return ComparisonOperator.LE;} |
  <GT> {return ComparisonOperator.GT;} |
  <GE> {return ComparisonOperator.GE;}
}

Quantifier Quantifier() :
{}
{
  <FORALL> {return Quantifier.FORALL;} |
  <EXISTS> {return Quantifier.EXISTS;}
}

SelectionSet SelectionSet() :
{}
{
  <IN>       {return SelectionSet.EACH_ELEMENT;} |
  <SUBSETEQ> {return SelectionSet.EACH_SUBSET;}
}

void ComparisonFormula() # ComparisonFormula :
{ComparisonOperator cmp;}
{
   Statement() cmp=CmpOp() Statement()
   {
     jjtThis.jjtSetValue(cmp);
   }
}

void QuantifierFormula() # QuantifierFormula() :
{Token q;}
{
   Quantifier() Identifier() SelectionSet() Statement() Formula()
}

void Formula() :
{}
{
   ComparisonFormula() | QuantifierFormula()
}


////////////////////////////////////////////////////////
//                     L*-features                    //
////////////////////////////////////////////////////////

// 1. Cond

void CondStatement() # CondStatement :
{Token t;}
{
   t=<COND> <OPAR>
   (LOOKAHEAD(Formula() <ARROW>) Formula() <ARROW> Statement() <COMMA>)+ Statement()
   <CPAR>
   {
     jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
   }
}

// 2. Iteration
// TODO


////////////////////////////////////////////////////////
//                      Statement                     //
////////////////////////////////////////////////////////

// 1. Types

void NumberVal() #NumberValue :
{Token t;}
{
  t=<INT_VAL> { jjtThis.jjtSetValue(Long.valueOf(t.image));   jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn)); } |
  t=<FLT_VAL> { jjtThis.jjtSetValue(Double.valueOf(t.image)); jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn)); }
}

void NullVal() #NullValue :
{Token t;}
{
  t=<NULL>
  {
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
  }
}

void ListVal() #ListValue :
{Token t;}
{
    t = <OAR> (Statement() (<COMMA> Statement())*)? <CAR>
    {
      jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    }
}

// 2. Var and member

void MemberStatement() # MemberStatement :
{Token t; Token memberName;}
{
  t=<THIS> <DOT> memberName=Identifier()
  {
    jjtThis.jjtSetValue(memberName.image);
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
  }
}

void VariableStatement() # VariableStatement :
{Token varName;}
{
  varName=Identifier()
  {
    jjtThis.jjtSetValue(varName.image);
    jjtThis.jjtSetLocation(new FileLocation(varName.beginLine, varName.beginColumn));
  }
}

// 3. Right-value statements (function call, arithmetic expression, e.t.c.)

void FunctionCallStatement() # FunctionCallStatement:
{Token calledFuncName;}
{
   calledFuncName=Identifier()
   <OPAR> (Statement() (<COMMA> Statement())*)? <CPAR>
   {
     jjtThis.jjtSetValue(calledFuncName.image);
     jjtThis.jjtSetLocation(new FileLocation(calledFuncName.beginLine, calledFuncName.beginColumn));
   }
}

void SingleStatement() :
{}
{
  LOOKAHEAD(2) CondStatement() |
  LOOKAHEAD(2) FunctionCallStatement() |
  MemberStatement() | VariableStatement() |
  ListVal() | NumberVal() | NullVal()
}

void ArithmeticStatement() # ArithmeticStatement :
{Token op = null; List<String> ops = new ArrayList();}
{ (                (SingleStatement() | <OPAR> ArithmeticStatement() <CPAR>)
   (op=<BINARY_OP> (SingleStatement() | <OPAR> ArithmeticStatement() <CPAR>) { ops.add(op.image); })+)
  {
    jjtThis.jjtSetValue(ops);
  }
}

void Statement():
{}
{
  LOOKAHEAD((<OPAR> ArithmeticStatement() <CPAR> | SingleStatement()) <BINARY_OP>) ArithmeticStatement() |
  SingleStatement()
}

// 4. Assignment, return

void AllStatements() :
{}
{
  (LOOKAHEAD(2) AssignmentStatement() | FunctionCallStatement() | ReturnStatement()) <END>
}

void AssignmentStatement() # AssignmentStatement :
{Token t;}
{
  (MemberStatement() | VariableStatement()) t = <ASSIGN> Statement()
  {
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
  }
}

void ReturnStatement() # ReturnStatement :
{Token t;}
{
  t = <RETURN> Statement()
  {
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
  }
}
