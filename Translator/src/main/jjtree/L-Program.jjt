options {
  STATIC = false;
  MULTI = true;
  NODE_DEFAULT_VOID=true;
  NODE_PREFIX = "";
}

PARSER_BEGIN(LStatement)
package ru.nsu.logic.lang.grammar;

import java.util.*;
import ru.nsu.logic.lang.grammar.common.*;
public class LStatement {}
PARSER_END(LStatement)

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
  < CLASS: "class">
  |
  < FUNCTION: "function">
  |
  < INHERIT: "extends">
  |
  < END: ";">
  |
  < OBR: "{" >
  |
  < CBR: "}" >
  |
  < OPAR  : "(" >
  |
  < CPAR  : ")" >
  |
  < OAR: "[">
  |
  < CAR: "]">
  |
  < COMMA: "," >
  |
  < DOT: "." >
  |
  < ASSIGN: ":=">
  |
  < THIS: "this">
  |
  < NULL: "nil">
  |
  < RETURN: "return">
  |
  < ACCESS_PUBLIC: "public">
  |
  < ACCESS_PRIVATE: "private">
  |
  < ACCESS_PROTECTED: "protected">
  |
  < LOGIC_AND: "and" >
  |
  < LOGIC_OR: "or" >
  |
  < LOGIC_NOT: "not" >
  |
  < IDENTIFIER: ["a"-"z","A"-"Z", "_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
  |
  < BINARY_OP: ["+", "-", "*", "/"] >
  |
  < EQ: "=" > | < NE: "<>" > | < LT: "<" > | < GT: ">" > | < LE: "<=" > | < GE: ">=" >
  |
  < INT_VAL: ( ["0"-"9"] )+ >
  |
  < FLT_VAL: ( ["0"-"9"] )+ "." ( ["0"-"9"] )+  >
  |
  < STR_VAL: "\"" (~["\""])* "\"" >
}

/*-----------------Common-----------------*/

AccessTypeEnum AccessType() :
{Token t;}
{
  (t=<ACCESS_PUBLIC> | t=<ACCESS_PRIVATE> | t=<ACCESS_PROTECTED>)
  {return AccessTypeEnum.valueOf(t.image.toUpperCase());}
}

String IDENTIFIER() :
{Token t;}
{
  t=<IDENTIFIER> {return t.image;}
}


/*-----------------Declarations-----------------*/

void ProgramDeclaration():
{}
{
  FunctionDeclaration() | ClassDeclaration()
}

/*-----------------Function or Method commons-----------------*/

String ArgumentDeclaration() # ArgumentDeclaration :
{String arg;}
{
  arg=IDENTIFIER()
  {jjtThis.jjtSetValue(arg);return arg;}
}

/* ---------------FORMULAS-------------------------*/

ComparisonFormulaStatement ComparisonFormulaStatement() # ComparisonFormulaStatement :
{IStatement lhs; IStatement rhs;}
{
   LOOKAHEAD(2) lhs = TermStatement() <EQ> rhs = TermStatement() {jjtThis.setLeft(lhs); jjtThis.setRight(rhs);jjtThis.setOperator(ComparisonOperator.EQ); return jjtThis;} |
   LOOKAHEAD(2) lhs = TermStatement() <NE> rhs = TermStatement() {jjtThis.setLeft(lhs); jjtThis.setRight(rhs);jjtThis.setOperator(ComparisonOperator.NE); return jjtThis;} |
   LOOKAHEAD(2) lhs = TermStatement() <LT> rhs = TermStatement() {jjtThis.setLeft(lhs); jjtThis.setRight(rhs);jjtThis.setOperator(ComparisonOperator.LT); return jjtThis;} |
   LOOKAHEAD(2) lhs = TermStatement() <LE> rhs = TermStatement() {jjtThis.setLeft(lhs); jjtThis.setRight(rhs);jjtThis.setOperator(ComparisonOperator.LE); return jjtThis;} |
   LOOKAHEAD(2) lhs = TermStatement() <GT> rhs = TermStatement() {jjtThis.setLeft(lhs); jjtThis.setRight(rhs);jjtThis.setOperator(ComparisonOperator.GT); return jjtThis;} |
   LOOKAHEAD(2) lhs = TermStatement() <GE> rhs = TermStatement() {jjtThis.setLeft(lhs); jjtThis.setRight(rhs);jjtThis.setOperator(ComparisonOperator.GE); return jjtThis;}
}

/* ---------------STATEMENT -------------------------*/

NumberValue NumberVal() #NumberValue :
{Token t;}
{
  t=<INT_VAL>   {long lv = Long.valueOf(t.image);     jjtThis.setNumber(lv); return jjtThis;} |
  t=<FLT_VAL> {double dv = Double.valueOf(t.image); jjtThis.setNumber(dv); return jjtThis;}
}

NullValue NullVal() #NullValue :
{}
{
  <NULL> {return jjtThis;}
}

ListValue ListVal() #ListValue :
{IStatement element; List<IStatement> elements = new ArrayList();}
{
    <OAR>
      (element=TermStatement()         {elements.add(element);}
      (<COMMA> element=TermStatement() {elements.add(element);} )*)?
    <CAR>
    {
       jjtThis.setElements(elements);
       return jjtThis;
    }
}

MemberStatement MemberStatement() # MemberStatement :
{String memberName;}
{
  <THIS> <DOT> memberName=IDENTIFIER()
  {jjtThis.setName(memberName); return jjtThis;}
}

VariableStatement VariableStatement() # VariableStatement :
{String varName;}
{
  varName=IDENTIFIER()
  {jjtThis.setName(varName); return jjtThis;}
}

FunctionCallStatement FunctionCallStatement() # FunctionCallStatement:
{String calledFuncName; IStatement param; List<IStatement> params = new ArrayList();}
{
   calledFuncName=IDENTIFIER()
   <OPAR>
      (param=TermStatement()         {params.add(param);}
      (<COMMA> param=TermStatement() {params.add(param);} )*)?
   <CPAR>
   {
      jjtThis.setFunctionName(calledFuncName);
      jjtThis.setCallParameters(params);
      return jjtThis;
    }
}

IStatement SingleStatement() :
{IStatement retVal;}
{
  (
    LOOKAHEAD(2) retVal = FunctionCallStatement() |
    retVal=MemberStatement() |
    retVal=VariableStatement() |
    retVal=ListVal() |
    retVal=NumberVal() |
    retVal=NullVal()
  )
  {return retVal;}
}

ComplexStatement ComplexStatement() # ComplexStatement :
{IStatement lhs = null; IStatement rhs = null; Token op = null;
 List<IStatement> args = new ArrayList();
 List<String> ops = new ArrayList();
}
{ (                (lhs=SingleStatement() | <OPAR> lhs=ComplexStatement() <CPAR>) {args.add(lhs);}
   (op=<BINARY_OP> (rhs=SingleStatement() | <OPAR> rhs=ComplexStatement() <CPAR>) {args.add(rhs); ops.add(op.image);})+)
  {jjtThis.setOperands(args); jjtThis.setOperators(ops); return jjtThis;}
}

IStatement TermStatement():
{IStatement retVal;}
{
  (LOOKAHEAD((<OPAR> ComplexStatement() <CPAR> | SingleStatement()) <BINARY_OP>)
   retVal = ComplexStatement()
   |
   retVal = SingleStatement())
  {return retVal;}
}

AssignmentStatement AssignmentStatement() # AssignmentStatement :
{IStatement target; IStatement what;}
{
   (target=MemberStatement() | target=VariableStatement())
   <ASSIGN> what = TermStatement()
   {jjtThis.setTarget(target); jjtThis.setWhat(what); return jjtThis;}
}

void ReturnStatement() # ReturnStatement :
{IStatement what;}
{ <RETURN> what=TermStatement() {jjtThis.setWhat(what);} }

void AllStatements() :
{}
{ (LOOKAHEAD(2) AssignmentStatement() | FunctionCallStatement() | ReturnStatement()) <END> }


/*-----------------Class-----------------*/

void ClassDeclaration() #ClassDeclaration :
{String className; String baseClass = null;}
{
  <CLASS> className=IDENTIFIER() [baseClass=InheritanceDeclaration()]
  <OBR> (LOOKAHEAD(2) ClassMemberDeclaration() | ClassMethodDeclaration())*
  <CBR>
  {jjtThis.setClassName(className);
   jjtThis.setBaseClass(baseClass);}
}

String InheritanceDeclaration() :
{String className;}
{
  <INHERIT> className=IDENTIFIER()
  {return className;}
}

void ClassMemberDeclaration() #ClassMemberDeclaration :
{AccessTypeEnum access; String member;}
{
  access=AccessType() member=IDENTIFIER() <END>
  {jjtThis.setAccessType(access);jjtThis.setName(member);}
}

void ClassMethodDeclaration() #ClassMethodDeclaration :
{AccessTypeEnum access = AccessTypeEnum.PROTECTED; String methodName;}
{
  [access = AccessType()] <FUNCTION> methodName=IDENTIFIER()
  <OPAR> (ArgumentDeclaration() (<COMMA> ArgumentDeclaration())*)? <CPAR>
  <OBR> (AllStatements())* <CBR>
  {jjtThis.setAccessType(access);
   jjtThis.setName(methodName);}
}

/*-----------------Function-----------------*/

void FunctionDeclaration() #FunctionDeclaration :
{String functionName;}
{
  <FUNCTION> functionName=IDENTIFIER()
  <OPAR> (ArgumentDeclaration() (<COMMA> ArgumentDeclaration())*)? <CPAR>
  <OBR> (AllStatements())* <CBR>
  {jjtThis.setName(functionName);}
}

/* -----------------Program-----------------*/
LLangProgram LLangProgram() #LLangProgram :
{}
{
  (ProgramDeclaration() | AllStatements())* <EOF>
   {return jjtThis;}
}