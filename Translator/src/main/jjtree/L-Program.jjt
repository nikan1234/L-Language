options {
  STATIC = false;
  MULTI = true;
  NODE_DEFAULT_VOID=true;
}

PARSER_BEGIN(LStatement)
package ru.nsu.logic.lang.grammar;
public class LStatement {}
PARSER_END(LStatement)

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
  < CLASS: "class">
  |
  < FUNCTION: "function">
  |
  < INHERIT: "extends">
  |
  < END: ";">
  |
  < OBR: "{" >
  |
  < CBR: "}" >
  |
  < OPAR  : "(" >
  |
  < CPAR  : ")" >
  |
  < COMMA: "," >
  |
  < DOT: "." >
  |
  < ASSIGN: ":=">
  |
  < THIS: "this">
  |
  < RETURN: "return">
  |
  < ACCESS_PUBLIC: "public">
  |
  < ACCESS_PRIVATE: "private">
  |
  < ACCESS_PROTECTED: "protected">
  |
  < Identifier: ["a"-"z","A"-"Z", "_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
  |
  < BinaryOperator: ["+", "-", "*", "/"] >
  |
  < IntVal: ( ["0"-"9"] )+ >
  |
  < FloatVal: ( ["0"-"9"] )+ "." ( ["0"-"9"] )+  >
  |
  < StrVal: "\"" (~["\""])* "\"" >
}

/*-----------------Common-----------------*/

AccessTypeEnum AccessType() :
{Token t;}
{
  (t=<ACCESS_PUBLIC> | t=<ACCESS_PRIVATE> | t=<ACCESS_PROTECTED>)
  {return AccessTypeEnum.valueOf(t.image.toUpperCase());}
}

String Identifier() :
{Token t;}
{
  t=<Identifier> {return t.image;}
}

long IntVal() #IntVal :
{Token t;}
{
  t=<IntVal> {long v = Long.valueOf(t.image); jjtThis.jjtSetValue(v); return v;}
}

double FloatVal() #FloatVal :
{Token t;}
{
  t=<FloatVal> {double v = Double.valueOf(t.image); jjtThis.jjtSetValue(v); return v;}
}


/*-----------------Declarations-----------------*/

void ProgramDecl():
{}
{
  FunctionDecl() | ClassDecl()
}

/*-----------------Function or Method commons-----------------*/

String ParamVariableDecl() # ParamVariableDecl :
{String arg;}
{
  arg=Identifier()
  {jjtThis.setParamName(arg);return arg;}
}

void ExecutionStatement() # ExecutionStatement :
{}
{ (AssignmentStmt() | ReturnStmt())* }

void MemberStmt() # MemberStmt :
{String memberName;}
{
  <THIS> <DOT> memberName=Identifier()
  {jjtThis.jjtSetValue(memberName);}
}

void VariableStmt() # VariableStmt :
{String varName;}
{
  varName=Identifier()
  {jjtThis.jjtSetValue(varName);}
}

void FunctionCallStmt() # FunctionCallStmt:
{}
{ Identifier() <OPAR> (TermStmt() (<COMMA> TermStmt())*)? <CPAR> }

void AssignmentStmt() # AssignmentStmt :
{String variable;}
{ (MemberStmt() | VariableStmt()) <ASSIGN> TermStmt() <END> }

void ReturnStmt() # ReturnStmt :
{}
{ <RETURN> TermStmt() <END> }

void TermStmt() :
{}
{
  (IntVal() | FloatVal() | LOOKAHEAD(2) FunctionCallStmt() | VariableStmt() | MemberStmt()) [<BinaryOperator> TermStmt()]
}


/*-----------------Class-----------------*/

void ClassDecl() #ClassDecl :
{String className; String baseClass = null;}
{
  <CLASS> className=Identifier() [baseClass=InheritanceDecl()]
  <OBR> (LOOKAHEAD(2) ClassMemberDecl() | ClassMethodDecl())*
  <CBR>
  {jjtThis.setClassName(className);
   jjtThis.setBaseClass(baseClass);}
}

String InheritanceDecl() :
{String className;}
{
  <INHERIT> className=Identifier()
  {return className;}
}

void ClassMemberDecl() #ClassMemberDecl :
{AccessTypeEnum access; String member;}
{
  access=AccessType() member=Identifier() <END>
  {jjtThis.setAccessType(access);jjtThis.setName(member);}
}

void ClassMethodDecl() #ClassMethodDecl :
{AccessTypeEnum access = AccessTypeEnum.PROTECTED; String methodName;}
{
  [access = AccessType()] <FUNCTION> methodName=Identifier()
  <OPAR> (ParamVariableDecl() (<COMMA> ParamVariableDecl())*)? <CPAR>
  <OBR> ExecutionStatement() <CBR>
  {jjtThis.setAccessType(access);
   jjtThis.setName(methodName);}
}

/*-----------------Function-----------------*/

void FunctionDecl() #FunctionDecl :
{String functionName;}
{
  <FUNCTION> functionName=Identifier()
  <OPAR> (ParamVariableDecl() (<COMMA> ParamVariableDecl())*)? <CPAR>
  <OBR> ExecutionStatement() <CBR>
  {jjtThis.setName(functionName);}
}

/* -----------------Program-----------------*/
ASTLLangProgram LLangProgram() #LLangProgram :
{}
{
  (ProgramDecl())* <EOF>
   {return jjtThis;}
}