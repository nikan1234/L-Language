options {
  STATIC = false;
  MULTI = true;
  NODE_DEFAULT_VOID=true;
  NODE_PREFIX = "AST";
}

PARSER_BEGIN(LStatement)
package ru.nsu.logic.lang.ast;

import java.util.*;
import ru.nsu.logic.lang.common.*;
public class LStatement {}
PARSER_END(LStatement)

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
  < CLASS: "class">
  |
  < FUNCTION: "function">
  |
  < INHERIT: "extends">
  |
  < END: ";">
  |
  < OBR: "{" >
  |
  < CBR: "}" >
  |
  < OPAR  : "(" >
  |
  < CPAR  : ")" >
  |
  < OAR: "[">
  |
  < CAR: "]">
  |
  < COMMA: "," >
  |
  < DOT: "." >
  |
  < ARROW: "==>" >
  |
  < COND: "cond" >
  |
  < ASSIGN: ":=" >
  |
  < THIS: "this" >
  |
  < NULL: "nil" >
  |
  < RETURN: "return" >
  |
  < NEW: "new" >
  |
  < ACCESS_PUBLIC: "public" >
  |
  < ACCESS_PRIVATE: "private" >
  |
  < ACCESS_PROTECTED: "protected" >
  |
  < LOGIC_AND: "and" >
  |
  < LOGIC_OR: "or" >
  |
  < LOGIC_NOT: "not" >
  |
  < FORALL: "forall" >
  |
  < EXISTS: "exists" >
  |
  < IN: "in" >
  |
  < SUBSETEQ: "subseteq" >
  |
  < IDENTIFIER: ["a"-"z","A"-"Z", "_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
  |
  < BINARY_OP: ["+", "-", "*", "/"] >
  |
  < EQ: "=" >
  |
  < NE: "<>" >
  |
  < LT: "<" >
  |
  < GT: ">" >
  |
  < LE: "<=" >
  |
  < GE: ">=" >
  |
  < INT_VAL: ( ["0"-"9"] )+ >
  |
  < FLT_VAL: ( ["0"-"9"] )+ "." ( ["0"-"9"] )+  >
  |
  < STR_VAL: "\"" (~["\""])* "\"" >
}


////////////////////////////////////////////////////////
//                       Common                       //
////////////////////////////////////////////////////////

void LLangProgramDeclaration():
{}
{
  FunctionDeclaration() | ClassDeclaration()
}

void LLangProgramStatement() :
{}
{
  (LOOKAHEAD(4) AssignmentStatement() |
   LOOKAHEAD(4) MethodCallStatement() |
   FunctionCallStatement() |
   ReturnStatement()) <END>
}

ASTLLangProgram LLangProgram() #LLangProgram :
{}
{
  (LLangProgramDeclaration() | LLangProgramStatement())* <EOF>
  {return jjtThis;}
}


Token Identifier() :
{Token t;}
{
  t=<IDENTIFIER> {return t;}
}

ASTAccessType AccessType() # AccessType :
{Token t;}
{
  (t=<ACCESS_PUBLIC> | t=<ACCESS_PRIVATE> | t=<ACCESS_PROTECTED>)
  {
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    jjtThis.jjtSetValue(AccessType.valueOf(t.image.toUpperCase()));
    return jjtThis;
  }
}


////////////////////////////////////////////////////////
//                    Declarations                    //
////////////////////////////////////////////////////////


ASTArgumentDeclaration ArgumentDeclaration() # ArgumentDeclaration :
{Token arg;}
{
  arg=Identifier()
  {
    jjtThis.jjtSetValue(arg.image);
    jjtThis.jjtSetLocation(new FileLocation(arg.beginLine, arg.beginColumn));
    return jjtThis;
  }
}

ASTBodyDeclaration BodyDeclaration() # BodyDeclaration :
{}
{
  (LLangProgramStatement())*
  { return jjtThis; }
}

// 1. Function Declaration

ASTFunctionDeclaration FunctionDeclaration() #FunctionDeclaration :
{Token t; Token functionName;}
{
  t=<FUNCTION> functionName=Identifier()
  <OPAR> (ArgumentDeclaration() (<COMMA> ArgumentDeclaration())*)? <CPAR>
  <OBR> BodyDeclaration() <CBR>
  {
    jjtThis.jjtSetValue(functionName.image);
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}

// 2. Class Declaration

ASTInheritanceDeclaration InheritanceDeclaration() # InheritanceDeclaration() :
{Token t; Token className;}
{
  t=<INHERIT> className=Identifier()
  {
    jjtThis.jjtSetValue(className.image);
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}

ASTClassDeclaration ClassDeclaration() #ClassDeclaration :
{Token t; Token className; Token baseClass = null;}
{
  t=<CLASS> className=Identifier() [InheritanceDeclaration()]
  <OBR>
      (LOOKAHEAD(2) ClassMemberDeclaration() | ClassMethodDeclaration())*
  <CBR>
  {
    jjtThis.jjtSetValue(className.image);
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}

ASTClassMemberDeclaration ClassMemberDeclaration() #ClassMemberDeclaration :
{Node access; Token member;}
{
  access=AccessType() member=Identifier() <END>
  {
    jjtThis.jjtSetValue(member.image);
    jjtThis.jjtSetLocation(access.jjtGetLocation());
    return jjtThis;
  }
}

ASTClassMethodDeclaration ClassMethodDeclaration() #ClassMethodDeclaration :
{Node access = null; Token t; Token methodName;}
{
  [access=AccessType()] t=<FUNCTION> methodName=Identifier()
  <OPAR> (ArgumentDeclaration() (<COMMA> ArgumentDeclaration())*)? <CPAR>
  <OBR> BodyDeclaration() <CBR>
  {
    jjtThis.jjtSetValue(methodName.image);
    jjtThis.jjtSetLocation(access == null ? new FileLocation(t.beginLine, t.beginColumn) : access.jjtGetLocation());
    return jjtThis;
  }
}


////////////////////////////////////////////////////////
//                       Formulas                     //
////////////////////////////////////////////////////////

Node Formula() :
{Node formula;}
{
   (formula=ComparisonFormula() | formula=QuantifierFormula())
   { return formula; }
}


ASTComparisonFormula ComparisonFormula() # ComparisonFormula :
{Node lhs; ComparisonOperator cmp;}
{
   lhs=Statement() (<EQ> {cmp=ComparisonOperator.EQ;} |
                    <NE> {cmp=ComparisonOperator.NE;} |
                    <LT> {cmp=ComparisonOperator.LT;} |
                    <LE> {cmp=ComparisonOperator.LE;} |
                    <GT> {cmp=ComparisonOperator.GT;} |
                    <GE> {cmp=ComparisonOperator.GE;})
   Statement()
   {
     jjtThis.jjtSetValue(cmp);
     jjtThis.jjtSetLocation(lhs.jjtGetLocation());
     return jjtThis;
   }
}


ASTQuantifierFormula QuantifierFormula() # QuantifierFormula() :
{Token begin; Token var; LimitedQuantifier.Quantifier q; LimitedQuantifier.Selection sel; Node src;}
{
   (begin=<FORALL> { q=LimitedQuantifier.Quantifier.FORALL; } | begin=<EXISTS> { q=LimitedQuantifier.Quantifier.EXISTS; })
   var=Identifier()
   (<IN> { sel=LimitedQuantifier.Selection.EACH_ELEMENT; } | <SUBSETEQ> { sel=LimitedQuantifier.Selection.EACH_SUBSET; })
   src=Statement() Formula()
   {
     jjtThis.jjtSetValue(new LimitedQuantifier<Node>(q, var.image, sel, src));
     jjtThis.jjtSetLocation(new FileLocation(begin.beginLine, begin.beginColumn));
     return jjtThis;
   }
}


////////////////////////////////////////////////////////
//                     L*-features                    //
////////////////////////////////////////////////////////

// 1. Cond

ASTCondStatement CondStatement() # CondStatement :
{Token t;}
{
   t=<COND> <OPAR>
   (LOOKAHEAD(Formula() <ARROW>) Formula() <ARROW> Statement() <COMMA>)+ Statement()
   <CPAR>
   {
     jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
     return jjtThis;
   }
}

// 2. Iteration
// TODO


////////////////////////////////////////////////////////
//                      Statement                     //
////////////////////////////////////////////////////////

// 1. Types

ASTIntValue IntVal() #IntValue :
{Token t;}
{
  t=<INT_VAL>
  {
    jjtThis.jjtSetValue(Long.valueOf(t.image));
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}

ASTFloatValue FloatVal() #FloatValue :
{Token t;}
{
  t=<FLT_VAL>
  {
    jjtThis.jjtSetValue(Double.valueOf(t.image));
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}

ASTNullValue NullVal() #NullValue :
{Token t;}
{
  t=<NULL>
  {
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}

ASTListValue ListVal() #ListValue :
{Token t;}
{
    t = <OAR> (Statement() (<COMMA> Statement())*)? <CAR>
    {
      jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
      return jjtThis;
    }
}

// 2. Var and member

ASTMemberStatement MemberStatement() # MemberStatement :
{Token objectName; Token memberName;}
{
  ((objectName=<THIS> | objectName=Identifier()) <DOT> memberName=Identifier())
  {
    jjtThis.jjtSetValue(objectName.image + '.' + memberName.image);
    jjtThis.jjtSetLocation(new FileLocation(objectName.beginLine, objectName.beginColumn));
    return jjtThis;
  }
}

ASTVariableStatement VariableStatement() # VariableStatement :
{Token varName;}
{
  varName=Identifier()
  {
    jjtThis.jjtSetValue(varName.image);
    jjtThis.jjtSetLocation(new FileLocation(varName.beginLine, varName.beginColumn));
    return jjtThis;
  }
}

// 3. Right-value statements (function call, arithmetic expression, e.t.c.)

ASTFunctionCallStatement FunctionCallStatement() # FunctionCallStatement:
{Token calledFuncName;}
{
   calledFuncName=Identifier()
   <OPAR> (Statement() (<COMMA> Statement())*)? <CPAR>
   {
     jjtThis.jjtSetValue(calledFuncName.image);
     jjtThis.jjtSetLocation(new FileLocation(calledFuncName.beginLine, calledFuncName.beginColumn));
     return jjtThis;
   }
}

ASTMethodCallStatement MethodCallStatement() # MethodCallStatement:
{Token objectName; Token calledMethodName;}
{
  (objectName=<THIS> | objectName=Identifier()) <DOT> calledMethodName=Identifier()
  <OPAR> (Statement() (<COMMA> Statement())*)? <CPAR>
  {
     jjtThis.jjtSetValue(objectName.image + '.' + calledMethodName.image);
     jjtThis.jjtSetLocation(new FileLocation(objectName.beginLine, objectName.beginColumn));
     return jjtThis;
  }
}

ASTConstructorCallStatement ConstructorCallStatement() # ConstructorCallStatement:
{Token newToken; Token className;}
{
   newToken=<NEW> className=Identifier()
   <OPAR> (Statement() (<COMMA> Statement())*)? <CPAR>
   {
        jjtThis.jjtSetValue(className.image);
        jjtThis.jjtSetLocation(new FileLocation(newToken.beginLine, newToken.beginColumn));
        return jjtThis;
   }
}

Node SingleStatement() :
{Node stmt;}
{
  (LOOKAHEAD(2) stmt=CondStatement() |
   LOOKAHEAD(2) stmt=FunctionCallStatement() |
   LOOKAHEAD(4) stmt=MethodCallStatement() |
   LOOKAHEAD(4) stmt=MemberStatement() | stmt=VariableStatement() |
   stmt=ConstructorCallStatement() |
   stmt=NullVal() | stmt=IntVal() | stmt=FloatVal() | stmt=ListVal())
  { return stmt; }
}

ASTArithmeticStatement ArithmeticStatement() # ArithmeticStatement :
{Token op = null; List<String> ops = new ArrayList();
 Node beginStmt = null; Token beginToken = null; }
{ (      (beginStmt=SingleStatement() | beginToken = <OPAR> ArithmeticStatement() <CPAR>)
   (op=<BINARY_OP> (SingleStatement() |              <OPAR> ArithmeticStatement() <CPAR>) { ops.add(op.image); })+)
  {
    jjtThis.jjtSetValue(ops);
    jjtThis.jjtSetLocation(beginStmt != null ? beginStmt.jjtGetLocation() : new FileLocation(beginToken.beginLine, beginToken.beginColumn));
    return jjtThis;
  }
}

Node Statement():
{ Node stmt; }
{
  (LOOKAHEAD((<OPAR> ArithmeticStatement() <CPAR> | SingleStatement()) <BINARY_OP>) stmt=ArithmeticStatement() |
   stmt=SingleStatement())
  { return stmt; }
}

// 4. Assignment, return

ASTAssignmentStatement AssignmentStatement() # AssignmentStatement :
{Node target;}
{
  (LOOKAHEAD(2) target=MemberStatement() | target=VariableStatement()) <ASSIGN> Statement()
  {
    jjtThis.jjtSetLocation(target.jjtGetLocation());
    return jjtThis;
  }
}

ASTReturnStatement ReturnStatement() # ReturnStatement :
{Token t;}
{
  t = <RETURN> Statement()
  {
    jjtThis.jjtSetLocation(new FileLocation(t.beginLine, t.beginColumn));
    return jjtThis;
  }
}
